#!/usr/bin/perl

=head1 NAME

 MultiThreadFreebayes
 Script to split and run multiple Freebayes processes

=cut

our $VERSION = '0.1';
$VERSION = eval $VERSION;

=head1 SYPNOSIS

 MultiThreadFreeBayes [-h] -b <bam_file> 
                           -f <fasta_reference>
                           -o <outbase_dir>
                           [-t <threads>]
                           [-s <split_type>]
                           [-p <freebayes_argpass>]

=head2 I<Flags:>

=over


=item -b

B<bam_file>                     input bam file (mandatory)

=item -f

B<fasta_reference>              fasta reference (mandatory)

=item -o

B<outbase_dir>                  base for output dir (mandatory)

=item -t                        

B<threads>                      number of threads (1/2 available by default)

=item -s                        

B<split_type>                   batch split type (byseq or bysize:binsize_bp) (byseq by default)

=item -p                        

B<freebayes_argpass>            freebayes argument to pass to the program (see description)

=item -h

B<help>                         print the help

=item -v

B<version>                      print version

=item -V

B<verbose_mode>                 run in the verbose mode

=back

=cut

=head1 DESCRIPTION

 This script divide a bam files by sequence or by sequence + bin size and
 run one FreeBayes process for each of the them. At the end, it merge
 the results. So for example if you want to run a variant calling on a genome
 with 12 sequences using 4 threads, you can use this tool as:

 MultiThreadFreeBayes -b mymap.bam -f myref.fasta -o myoutdir -t 4 

 This script will divide the bam file by sequenceID producing 12 subbam files.
 Then, it will run 12 independent processes in batches of 4 (one per processor).
 At the end, it will merge the 12 subVCF's.

 Program required:
   - samtools
   - freebayes

 The programs binaries can be in the PATH or being supplied as an environmental
 variable: SAMTOOLS_PATH, and/or FREEBAYES_PATH

 This script has two modes to split the bam file:
   1) By sequence ID (in as many SeqIDs as the fasta reference has).
   2) By bin size (as soon as the bin is bigger than the sequence size)
      For example, if the reference file has 5 sequences of 30.4, 19.7, 
      23.4, 18.6 and 27.0 Mb respectively and the option 
      -s bysize:1000000, it will produce 121 bins (31, 20, 24, 19 and
      27 for each of the sequences respectively).

 To pass arguments from the script to Freebayes, the option -p can be used
 using single quotes, equal for values and semicolon to separate arguments 
 (e.g. '--no-complex;-m=30'). Options -b, --bam, -L, --bam-list, -c, --stdin, 
 -f, --fasta-reference, -t, --target, -r, --region, -v, --vcf and -= will 
 be ignored.


=cut

=head1 AUTHORS

  Aureliano Bombarely
  (aureliano.bombarely@unimi.it).

=cut

=head1 METHODS

 MultiThreadFreebayes

=cut


use strict;
use warnings;
use autodie;

use Config;
use threads;

use Getopt::Std;
use File::Spec;
use File::Basename;
use File::Copy;
use File::Path qw(make_path remove_tree);
use IPC::Cmd qw[can_run run];
use Math::BigFloat;
use Bio::SeqIO;


our ($opt_b, $opt_f, $opt_o, $opt_t, $opt_s, $opt_p, 
     $opt_h, $opt_v, $opt_V);

getopts("b:f:o:t:s:p:hvV");

$Config{useithreads} or 
    die('THREAD ERROR: Recompile Perl with threads to run this program.');

if (!$opt_b && !$opt_f && !$opt_o && !$opt_t && !$opt_s && !$opt_p 
    && !$opt_h && !$opt_v && !$opt_V) {
    print "There are n\'t any tags. Print help\n\n";
    help();
}
elsif ($opt_h) {
    help();
}
elsif ($opt_v) {
    print STDERR "\nMultiThreadFreebayes version: $VERSION\n\n";
    exit(1);
}

#################################################################
### CHECK THE ARGUMENTS                                       ###
#################################################################

my $date = `date`;
chomp($date);

print STDERR "\n\n#########################################################\n";
print STDERR "## MultiThreadFreebayes version:$VERSION \n";
print STDERR "## $date \n";
print STDERR "#########################################################\n\n";

## First argument checking

print_header("0) Arguments validation");

my $mainbam = $opt_b ||
    die("\nERROR: No -b <bam_file> was supplied.\n");

print STDERR "\n\tBAM file: $mainbam\n";

my $reffasta = $opt_f ||
    die("\nERROR: No -f <reference_fasta> was supplied.\n");

print STDERR "\tREFERENCE FASTA file: $reffasta\n";

my $outdir = $opt_o ||
    die("\nERROR: No -o <outbase_dir> was supplied.\n");

print STDERR "\tOutput directory: $outdir\n";
unless (-d $outdir) {

    die("\nERROR: Out directory does not exist. Please create it.\n\n");
}
    
## Check how many CPU(s) your system has
my $avail_cpus = `lscpu | grep "^CPU(s)"`;
chomp($avail_cpus);
$avail_cpus =~ s/CPU\(s\):\s+//;

## Estimate the half value of the available_cpus
my $half_cpus = Math::BigFloat->new($avail_cpus/2)->bfround(0);

my $threads = $opt_t || $half_cpus;
unless ($threads =~ m/^\d+$/) {

    die("ERROR: -t <threads> is not an integer.\n");
}
else {

    if ($threads > $avail_cpus) {

        die("\nERROR: -t <threads> $threads is bigger than the max. number of available threads ion the system ($avail_cpus).\n");
    }
    print STDERR "\tTHREADS SET TO: $threads\n";
}

my $splitmode = $opt_s || "byseq";
if ($splitmode =~ m/^bysize:(\d+)$/) {

   print STDERR "\tSPLITTING MODE: bysize with bin size $1 bp\n\n";
}
elsif ($splitmode =~ m/^byseq$/) {

   print STDERR "\tSPLITTING MODE: byseq\n\n";
}
else {

    die("\nERROR: -s <splitmode> does not match with available modes (byseq or bysize:XXX where XXX is an integer.\n");
}

## It will wait until check the programs to check the freebayes arguments

my %exec_list = (
    FREEBAYES_PATH  => ['freebayes'],
    SAMTOOLS_PATH   => ['samtools'],
    ); 

## Note: When you install SSPACE-LongRead.pl has the wrong interpreter
##       it is used with perl.

my %exepath = ();

foreach my $exec_key (sort keys %exec_list) {

    my @execitems = @{$exec_list{$exec_key}};
    foreach my $e_item (@execitems) {

        if (exists $ENV{$exec_key}) {
    
            print STDERR "\t$exec_key PATH defined for $e_item executable\n";
            $exepath{$e_item} = File::Spec->catfile($ENV{$exec_key}, $e_item);
        }
        else {
    
            my $exe_path = can_run($e_item);
            if ($exe_path) {
                
                $exepath{$e_item} = $exe_path;
                print STDERR "\t$e_item is available in the PATH ($exe_path)\n";
            }
            else {
                
                print STDERR "\nERROR: $e_item executable ($exec_key package)";
                die(" is not accessible.\n");
            }      
        }       
    }
}

## Get the permited options for freebayes

my $freebayes_argsline = $opt_p;
my %freebayes_args = ();

## There are some options that should not be used because it will 
## produce problems downstream to process the output

my %freebayes_ban = (
    '-b'                => 1,
    '--bam'             => 1,
    '-L'                => 1,
    '--bam-list'        => 1,
    '-c'                => 1,
    '--stdin'           => 1,
    '-v'                => 1,
    '--vcf'             => 1,
    '-f'                => 1,
    '--fasta-reference' => 1,
    '-t'                => 1,
    '--targets'         => 1,
    '-r'                => 1,
    '--region'          => 1
);

if ($freebayes_argsline) {

    my $freebayes_h = "$exepath{freebayes} -help";
    $freebayes_h .= "| sed -r 's/^\\s+//' | grep '^-' | sed -r 's/\\s+--/\\n--/' | sed -r 's/\\s+.+//'";
    my @freebayes_h_run = run( command => $freebayes_h );

    my %perm_freebayes = ();
    foreach my $freebayes_arg (split(/\n/, $freebayes_h_run[3]->[0])) {
                       
        $perm_freebayes{$freebayes_arg} = 1;
    }

    foreach my $f_argline (split(/;/, $freebayes_argsline)) {
    
        if ($f_argline =~ m/^(\-{1,2}\w+[\-\w+]*)=?(.*)$/) {
        
            my $f_arg = $1;
            my $f_val = $2;
            unless (exists $perm_freebayes{$f_arg}) {
            
                die("\nFREEBAYES OPTION ERROR: $f_arg is not Freebayes option.\n");
            }
            else {
            
                if (exists $freebayes_ban{$f_arg}) {
        
                    warn("\nWARNING: Freebayes argument $f_arg can not be used.\n");
                }
                else {

                    $freebayes_args{$f_arg} = $f_val;
                }
            }
        }
        else {
   
            die("\nERROR: parsing the argument: $f_argline for Freebayes.\nThey should be -arg1=val1;--arg2;--arg3=val3...\n");

        }
    }
}

print_header("1) Generating indexes and bins");

## Check if the bam file has a .bai
unless (-f $mainbam . ".bai") {

    print STDERR "\tNo bam index found. Generating.\n\n";
    my @bamcmd = ($exepath{'samtools'}, "index", $mainbam,);
    my @bam_run = run( command => \@bamcmd, verbose => $opt_V );
}

my @indexes = ();
my $seqIO = Bio::SeqIO->new(-file => $reffasta, -format => 'fasta');

while ( my $seq = $seqIO->next_seq() ) {

    my $seqid  = $seq->display_id();
    my $seqlength = $seq->length();

    if ($splitmode eq "byseq") {

        push(@indexes, $seqid.":0-".$seqlength);
    }
    elsif ($splitmode =~ m/^bysize:(\d+)$/) {

        my $binsize = $1;
        ## The script will need to create bins
        my $bin = 1;
        my $binstart = 0;
        my $binend = $bin * $binsize;
        while($binend < $seqlength) {

            push(@indexes, $seqid.":".$binstart."-".$binend);
	    	
            $binstart = $binend + 1;
            $bin++;
	    $binend = $bin * $binsize;
        }  
        if ($binend >= $seqlength) {

	    push(@indexes, $seqid.":".$binstart."-".$seqlength);
        }
    }
}
my $bin_n = scalar(@indexes);
print STDERR "\n\t$bin_n sequence bins have been created.\n";

print_header("1) Job packing");

my ($fname, $fpath, $fsuffix) = fileparse($mainbam, (".bam"));
my $subfiles_dir = File::Spec->catfile($outdir, "subfiles");
mkdir($subfiles_dir);

my %packages = ();
my %outfiles = ();

my ($j, $m, $v) = (1, 0, 0);

foreach my $index (@indexes) {
    
    ## First build the command line
    ## This line will be the same for each job except for 
    ## the region and the output
    ## The outfile will be names as:
    ## outdir + "/" + inputbase + "_" + baseout + ".vcf"

    my $baseout = $index;
    $baseout =~ s/:/_/g;
    $baseout =~ s/-/_/g;    
    my $outfile = File::Spec->catfile($subfiles_dir, $fname . "_" . $baseout .".vcf");

    ## Now it will create the command to run
    my @freebayes_cmd = ($exepath{'freebayes'}, "-b", $mainbam, "-f", $reffasta, "-v", $outfile, "-r", $index);

    foreach my $freebayes_arg (sort keys %freebayes_args) {

        push(@freebayes_cmd, ($freebayes_arg, $freebayes_args{$freebayes_arg}));
    }

    my $freebayes_cmd = join(" ", @freebayes_cmd);
    my $test_cmd = join("|", @freebayes_cmd);
    print STDERR "TEST: $test_cmd\n";	

    ## Now it will pack the commands
    if ($j <= $threads) {

        if ($j == 1) {

            ## Create a new package
            $m++;
            $packages{$m} = [$freebayes_cmd];
        }
	else {

            push(@{$packages{$m}}, $freebayes_cmd); 
        }
        $j++;
        $v++;
        $outfiles{$v} = $outfile;

        if ($j == $threads) {
  
            ## Reset the counter
            $j = 1;
        }		
    }
}

my $pcks = scalar(keys %packages);
print STDERR "\tBatches have been organized in $pcks packages and $v jobs\n";

print_header("2) Packs executions");

my $j_exec = 0;

foreach my $pack_n (sort {$a <=> $b} keys %packages) {

    my @cmds2run = @{$packages{$pack_n}};
    my ($n, $j_run) = (0, 0);
    my @th_procs = ();

    my $all_j = scalar(@cmds2run);
    print STDERR "\n\tRunning package $pack_n ($threads threads)\n";

    foreach my $fb_cmd (@cmds2run) {	

	$j_run++;
	my $th_proc = threads->create(\&run_batchstructure, $fb_cmd);
	push @th_procs, $th_proc;
	$n++;
    }

    foreach my $th (@th_procs) {
	my $th_id = $th->tid();
	my $th_res = $th->join();

	unless (defined($th_res)) {
	    warning("\tExecution error for thread $th_id\n");
	    my $error = $th->error();
	    print "\n===== ERROR $th_id =====\n$error\n===================\n";
	}
	$j_exec++;
    }
}

print STDERR "\n\t$j_exec jobs have been executed in $pcks packages.\n";

print_header("3) Merge the outputs");

## The program will merge the output parsing the files and reading them.

my $final_outfile = File::Spec->catfile($outdir, $fname .".vcf");
open my $ofh, '>', $final_outfile;

my $filenumber = 0;
foreach my $cmd_idx (sort {$a <=> $b} keys %outfiles) {

    open my $mfh, '<', $outfiles{$cmd_idx};
    while(<$mfh>) {
    
        chomp($_);
        if ($filenumber == 0) {

            print $ofh "$_\n";
        }
	else {

            unless ($_ =~ m/^#/) {

                print $ofh "$_\n"; 
            }
        } 
    }
    $filenumber++;
}


##


$date = `date`;
chomp($date);
print STDERR "\n\n#########################################################\n";
print STDERR "## End of the MultiThreadFreebayes execution           ##\n";
print STDERR "## $date                        ##\n";
print STDERR "#########################################################\n\n";

=head2 help

  Usage: help()
  Desc: print help of this script
  Ret: none
  Args: none
  Side_Effects: exit of the script
  Example: if (!@ARGV) {
               help();
           }

=cut

sub help {
  print STDERR <<EOF;
  $0:

    Description:
      
        This script divide a bam files by sequence or by sequence + bin size and
        run one FreeBayes process for each of the them. At the end, it merge
        the results. So for example if you want to run a variant calling on a genome
        with 12 sequences using 4 threads, you can use this tool as:

        MultiThreadFreeBayes -b mymap.bam -f myref.fasta -o myoutdir -t 4

        This script will divide the bam file by sequenceID producing 12 subbam files.
        Then, it will run 12 independent processes in batches of 4 (one per processor).
        At the end, it will merge the 12 subVCF's.

        Program required:
          - samtools
          - freebayes

        The programs binaries can be in the PATH or being supplied as an environmental
        variable: SAMTOOLS_PATH, and/or FREEBAYES_PATH

        This script has two modes to split the bam file:
          1) By sequence ID (in as many SeqIDs as the fasta reference has).
          2) By bin size (as soon as the bin is bigger than the sequence size)
             For example, if the reference file has 5 sequences of 30.4, 19.7,
             23.4, 18.6 and 27.0 Mb respectively and the option
             -s bysize:1000000, it will produce 121 bins (31, 20, 24, 19 and
             27 for each of the sequences respectively).

        To pass arguments from the script to Freebayes, the option -p can be used
        using single quotes, equal for values and semicolon to separate arguments
        (e.g. '--no-complex;-m=30'). Options -b, --bam, -L, --bam-list, -c, --stdin,
        -f, --fasta-reference, -t, --target, -r, --region, -v, --vcf and -= will
        be ignored.  

    Usage:

        MultiThreadFreeBayes -b <bam_file>
                             -f <fasta_reference>
                             -o <outbase_dir>
                             [-t <threads>]
                             [-s <split_type>]
                             [-p <freebayes_argpass>]
                             [-V]

    Flags:
 
     -b  bam_file               input bam file (mandatory)
     -f  fasta_reference        fasta reference (mandatory)
     -o  outbase_dir            base for output dir (mandatory)
     -t  threads                number of threads (1/2 available by default)
     -s  split_type             batch split type (byseq or bysize:binsize_bp) (byseq by default)
     -p  freebayes_argpass      freebayes argument to pass to the program (see description)
     -h  help                   print the help
     -v  version                print version
     -V  verbose_mode           run in the verbose mode

EOF
exit (1);
}

=head2 print_header

  Usage: print_head("Message");

  Desc: print a section head

  Ret: None

  Args: Message to print in the header

  Side_Effects: None

  Example: print_head("Step1: This is a test");

=cut

sub print_header {
    my $message = shift;

    my $date = `date`;

    unless (defined $date) {
	
	$date = 'NA';
    }
    else {
	chomp($date);
    }

    print STDERR "\n";
    print STDERR "============================================================";
    print STDERR "\n $message ($date)\n";
    print STDERR "============================================================";
    print STDERR "\n\n";
}


=head2 run_batchstructure

  Usage: run_batchstructure($mainparfile, $extraparfile);
  
  Desc: run structure
  
  Ret: nothing
  
  Args: $mainparfile, a file with the main parameters
        $extraparfile, a file with the extra parameters
  
  Side_Effects: die of something is wrong
  
  Example: run_batchstructure($mainparfile, $extraparfile);

=cut

sub run_batchstructure {    
    my $freebayes_cmd = shift ||
	die("ERROR: No freebayes_cmd was supplied to run_batchstructure");
    
    #print STDERR "\tRunning: $cmd\n";
    my @freebayes_run = run( command => $freebayes_cmd, verbose => $opt_V );
 
    return 1;
}

